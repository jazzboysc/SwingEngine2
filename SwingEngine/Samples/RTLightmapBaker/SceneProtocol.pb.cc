// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class Vector3DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector3> {
} _Vector3_default_instance_;
class Vector4DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector4> {
} _Vector4_default_instance_;
class QuaternionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Quaternion> {
} _Quaternion_default_instance_;
class TransformDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transform> {
} _Transform_default_instance_;
class ColorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Color> {
} _Color_default_instance_;
class MaterialDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Material> {
} _Material_default_instance_;
class SceneNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SceneNode> {
} _SceneNode_default_instance_;

namespace protobuf_SceneProtocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, w_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, w_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, translation_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, a_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, diffusecolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, diffusemapurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, roughness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, roughnessmapurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, metallic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, metallicmapurl_),
  3,
  0,
  4,
  1,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNode, worldtransform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNode, meshurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNode, materials_),
  1,
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Vector3)},
  { 10, 18, sizeof(Vector4)},
  { 22, 30, sizeof(Quaternion)},
  { 34, 41, sizeof(Transform)},
  { 44, 52, sizeof(Color)},
  { 56, 66, sizeof(Material)},
  { 72, 79, sizeof(SceneNode)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transform_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Material_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneNode_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "SceneProtocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vector3_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Vector4_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Quaternion_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Transform_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Color_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Material_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SceneNode_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vector3_default_instance_.DefaultConstruct();
  _Vector4_default_instance_.DefaultConstruct();
  _Quaternion_default_instance_.DefaultConstruct();
  _Transform_default_instance_.DefaultConstruct();
  _Color_default_instance_.DefaultConstruct();
  _Material_default_instance_.DefaultConstruct();
  _SceneNode_default_instance_.DefaultConstruct();
  _Transform_default_instance_.get_mutable()->scale_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
  _Transform_default_instance_.get_mutable()->orientation_ = const_cast< ::Quaternion*>(
      ::Quaternion::internal_default_instance());
  _Transform_default_instance_.get_mutable()->translation_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
  _Material_default_instance_.get_mutable()->diffusecolor_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
  _SceneNode_default_instance_.get_mutable()->worldtransform_ = const_cast< ::Transform*>(
      ::Transform::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023SceneProtocol.proto\"*\n\007Vector3\022\t\n\001x\030\001 "
      "\002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"5\n\007Vector4\022\t\n\001"
      "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 \002(\002"
      "\"8\n\nQuaternion\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001"
      "z\030\003 \002(\002\022\t\n\001w\030\004 \002(\002\"e\n\tTransform\022\027\n\005scale"
      "\030\001 \002(\0132\010.Vector3\022 \n\013orientation\030\002 \002(\0132\013."
      "Quaternion\022\035\n\013translation\030\003 \002(\0132\010.Vector"
      "3\"3\n\005Color\022\t\n\001r\030\001 \002(\002\022\t\n\001g\030\002 \002(\002\022\t\n\001b\030\003 "
      "\002(\002\022\t\n\001a\030\004 \002(\002\"\225\001\n\010Material\022\034\n\014diffuseCo"
      "lor\030\001 \001(\0132\006.Color\022\025\n\rdiffuseMapURL\030\002 \001(\t"
      "\022\021\n\troughness\030\003 \001(\002\022\027\n\017roughnessMapURL\030\004"
      " \001(\t\022\020\n\010metallic\030\005 \001(\002\022\026\n\016metallicMapURL"
      "\030\006 \001(\t\"^\n\tSceneNode\022\"\n\016worldTransform\030\001 "
      "\002(\0132\n.Transform\022\017\n\007meshURL\030\002 \002(\t\022\034\n\tmate"
      "rials\030\003 \003(\0132\t.Material"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneProtocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_SceneProtocol_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SceneProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[0].descriptor;
}

const Vector3& Vector3::default_instance() {
  protobuf_SceneProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector3)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector3)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Vector3)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector3)
  return target;
}

size_t Vector3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vector3)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// required float x = 1;
bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Vector3.x)
  return x_;
}
void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector3.x)
}

// required float y = 2;
bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Vector3.y)
  return y_;
}
void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector3.y)
}

// required float z = 3;
bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Vector3.z)
  return z_;
}
void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector4::kXFieldNumber;
const int Vector4::kYFieldNumber;
const int Vector4::kZFieldNumber;
const int Vector4::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector4::Vector4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SceneProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector4)
}
Vector4::Vector4(const Vector4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:Vector4)
}

void Vector4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
}

Vector4::~Vector4() {
  // @@protoc_insertion_point(destructor:Vector4)
  SharedDtor();
}

void Vector4::SharedDtor() {
}

void Vector4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector4::descriptor() {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[1].descriptor;
}

const Vector4& Vector4::default_instance() {
  protobuf_SceneProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector4* Vector4::New(::google::protobuf::Arena* arena) const {
  Vector4* n = new Vector4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector4::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector4)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w = 4;
      case 4: {
        if (tag == 37u) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector4)
  return false;
#undef DO_
}

void Vector4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector4)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vector4)
}

::google::protobuf::uint8* Vector4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Vector4)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector4)
  return target;
}

size_t Vector4::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vector4)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vector4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vector4)
    MergeFrom(*source);
  }
}

void Vector4::MergeFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
}

void Vector4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4::CopyFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Vector4::Swap(Vector4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector4::InternalSwap(Vector4* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector4::GetMetadata() const {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector4

// required float x = 1;
bool Vector4::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector4::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector4::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector4::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vector4::x() const {
  // @@protoc_insertion_point(field_get:Vector4.x)
  return x_;
}
void Vector4::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector4.x)
}

// required float y = 2;
bool Vector4::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector4::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector4::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector4::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vector4::y() const {
  // @@protoc_insertion_point(field_get:Vector4.y)
  return y_;
}
void Vector4::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector4.y)
}

// required float z = 3;
bool Vector4::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector4::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector4::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector4::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Vector4::z() const {
  // @@protoc_insertion_point(field_get:Vector4.z)
  return z_;
}
void Vector4::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Vector4.z)
}

// required float w = 4;
bool Vector4::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vector4::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
void Vector4::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vector4::clear_w() {
  w_ = 0;
  clear_has_w();
}
float Vector4::w() const {
  // @@protoc_insertion_point(field_get:Vector4.w)
  return w_;
}
void Vector4::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:Vector4.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
const int Quaternion::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SceneProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:Quaternion)
}

void Quaternion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[2].descriptor;
}

const Quaternion& Quaternion::default_instance() {
  protobuf_SceneProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Quaternion* Quaternion::New(::google::protobuf::Arena* arena) const {
  Quaternion* n = new Quaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:Quaternion)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Quaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w = 4;
      case 4: {
        if (tag == 37u) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Quaternion)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Quaternion)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quaternion)
  return target;
}

size_t Quaternion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Quaternion)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaternion

// required float x = 1;
bool Quaternion::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Quaternion::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Quaternion::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Quaternion::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:Quaternion.x)
  return x_;
}
void Quaternion::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.x)
}

// required float y = 2;
bool Quaternion::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Quaternion::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Quaternion::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Quaternion::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:Quaternion.y)
  return y_;
}
void Quaternion::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.y)
}

// required float z = 3;
bool Quaternion::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Quaternion::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Quaternion::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Quaternion::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:Quaternion.z)
  return z_;
}
void Quaternion::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.z)
}

// required float w = 4;
bool Quaternion::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Quaternion::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
void Quaternion::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void Quaternion::clear_w() {
  w_ = 0;
  clear_has_w();
}
float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:Quaternion.w)
  return w_;
}
void Quaternion::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform::kScaleFieldNumber;
const int Transform::kOrientationFieldNumber;
const int Transform::kTranslationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform::Transform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SceneProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Transform)
}
Transform::Transform(const Transform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scale()) {
    scale_ = new ::Vector3(*from.scale_);
  } else {
    scale_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_translation()) {
    translation_ = new ::Vector3(*from.translation_);
  } else {
    translation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Transform)
}

void Transform::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&scale_, 0, reinterpret_cast<char*>(&translation_) -
    reinterpret_cast<char*>(&scale_) + sizeof(translation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  if (this != internal_default_instance()) {
    delete scale_;
  }
  if (this != internal_default_instance()) {
    delete orientation_;
  }
  if (this != internal_default_instance()) {
    delete translation_;
  }
}

void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[3].descriptor;
}

const Transform& Transform::default_instance() {
  protobuf_SceneProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transform* Transform::New(::google::protobuf::Arena* arena) const {
  Transform* n = new Transform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:Transform)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_scale()) {
      GOOGLE_DCHECK(scale_ != NULL);
      scale_->::Vector3::Clear();
    }
    if (has_orientation()) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->::Quaternion::Clear();
    }
    if (has_translation()) {
      GOOGLE_DCHECK(translation_ != NULL);
      translation_->::Vector3::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Transform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Vector3 scale = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Quaternion orientation = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector3 translation = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Transform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Transform)
  return false;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Transform)
  // required .Vector3 scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->scale_, output);
  }

  // required .Quaternion orientation = 2;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // required .Vector3 translation = 3;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->translation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Transform)
}

::google::protobuf::uint8* Transform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Transform)
  // required .Vector3 scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->scale_, false, target);
  }

  // required .Quaternion orientation = 2;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, false, target);
  }

  // required .Vector3 translation = 3;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->translation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transform)
  return target;
}

size_t Transform::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Transform)
  size_t total_size = 0;

  if (has_scale()) {
    // required .Vector3 scale = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scale_);
  }

  if (has_orientation()) {
    // required .Quaternion orientation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  if (has_translation()) {
    // required .Vector3 translation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }

  return total_size;
}
size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transform)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Vector3 scale = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scale_);

    // required .Quaternion orientation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);

    // required .Vector3 translation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Transform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_scale()) {
      mutable_scale()->::Vector3::MergeFrom(from.scale());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::Quaternion::MergeFrom(from.orientation());
    }
    if (from.has_translation()) {
      mutable_translation()->::Vector3::MergeFrom(from.translation());
    }
  }
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_scale()) {
    if (!this->scale_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  if (has_translation()) {
    if (!this->translation_->IsInitialized()) return false;
  }
  return true;
}

void Transform::Swap(Transform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform::InternalSwap(Transform* other) {
  std::swap(scale_, other->scale_);
  std::swap(orientation_, other->orientation_);
  std::swap(translation_, other->translation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// required .Vector3 scale = 1;
bool Transform::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transform::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
void Transform::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transform::clear_scale() {
  if (scale_ != NULL) scale_->::Vector3::Clear();
  clear_has_scale();
}
const ::Vector3& Transform::scale() const {
  // @@protoc_insertion_point(field_get:Transform.scale)
  return scale_ != NULL ? *scale_
                         : *::Vector3::internal_default_instance();
}
::Vector3* Transform::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) {
    scale_ = new ::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:Transform.scale)
  return scale_;
}
::Vector3* Transform::release_scale() {
  // @@protoc_insertion_point(field_release:Transform.scale)
  clear_has_scale();
  ::Vector3* temp = scale_;
  scale_ = NULL;
  return temp;
}
void Transform::set_allocated_scale(::Vector3* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:Transform.scale)
}

// required .Quaternion orientation = 2;
bool Transform::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transform::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
void Transform::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transform::clear_orientation() {
  if (orientation_ != NULL) orientation_->::Quaternion::Clear();
  clear_has_orientation();
}
const ::Quaternion& Transform::orientation() const {
  // @@protoc_insertion_point(field_get:Transform.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::Quaternion::internal_default_instance();
}
::Quaternion* Transform::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:Transform.orientation)
  return orientation_;
}
::Quaternion* Transform::release_orientation() {
  // @@protoc_insertion_point(field_release:Transform.orientation)
  clear_has_orientation();
  ::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Transform::set_allocated_orientation(::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:Transform.orientation)
}

// required .Vector3 translation = 3;
bool Transform::has_translation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transform::set_has_translation() {
  _has_bits_[0] |= 0x00000004u;
}
void Transform::clear_has_translation() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transform::clear_translation() {
  if (translation_ != NULL) translation_->::Vector3::Clear();
  clear_has_translation();
}
const ::Vector3& Transform::translation() const {
  // @@protoc_insertion_point(field_get:Transform.translation)
  return translation_ != NULL ? *translation_
                         : *::Vector3::internal_default_instance();
}
::Vector3* Transform::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:Transform.translation)
  return translation_;
}
::Vector3* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:Transform.translation)
  clear_has_translation();
  ::Vector3* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform::set_allocated_translation(::Vector3* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:Transform.translation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
const int Color::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SceneProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:Color)
}

void Color::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&r_, 0, reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_) + sizeof(a_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[4].descriptor;
}

const Color& Color::default_instance() {
  protobuf_SceneProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:Color)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&r_, 0, reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_) + sizeof(a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float r = 1;
      case 1: {
        if (tag == 13u) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float g = 2;
      case 2: {
        if (tag == 21u) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float b = 3;
      case 3: {
        if (tag == 29u) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float a = 4;
      case 4: {
        if (tag == 37u) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Color)
  // required float r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // required float g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // required float b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // required float a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Color)
  // required float r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // required float g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // required float b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // required float a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Color)
  return target;
}

size_t Color::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Color)
  size_t total_size = 0;

  if (has_r()) {
    // required float r = 1;
    total_size += 1 + 4;
  }

  if (has_g()) {
    // required float g = 2;
    total_size += 1 + 4;
  }

  if (has_b()) {
    // required float b = 3;
    total_size += 1 + 4;
  }

  if (has_a()) {
    // required float a = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Color)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float r = 1;
    total_size += 1 + 4;

    // required float g = 2;
    total_size += 1 + 4;

    // required float b = 3;
    total_size += 1 + 4;

    // required float a = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(a_, other->a_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// required float r = 1;
bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
void Color::clear_r() {
  r_ = 0;
  clear_has_r();
}
float Color::r() const {
  // @@protoc_insertion_point(field_get:Color.r)
  return r_;
}
void Color::set_r(float value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:Color.r)
}

// required float g = 2;
bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
void Color::clear_g() {
  g_ = 0;
  clear_has_g();
}
float Color::g() const {
  // @@protoc_insertion_point(field_get:Color.g)
  return g_;
}
void Color::set_g(float value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:Color.g)
}

// required float b = 3;
bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void Color::clear_b() {
  b_ = 0;
  clear_has_b();
}
float Color::b() const {
  // @@protoc_insertion_point(field_get:Color.b)
  return b_;
}
void Color::set_b(float value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:Color.b)
}

// required float a = 4;
bool Color::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Color::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void Color::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void Color::clear_a() {
  a_ = 0;
  clear_has_a();
}
float Color::a() const {
  // @@protoc_insertion_point(field_get:Color.a)
  return a_;
}
void Color::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:Color.a)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Material::kDiffuseColorFieldNumber;
const int Material::kDiffuseMapURLFieldNumber;
const int Material::kRoughnessFieldNumber;
const int Material::kRoughnessMapURLFieldNumber;
const int Material::kMetallicFieldNumber;
const int Material::kMetallicMapURLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Material::Material()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SceneProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Material)
}
Material::Material(const Material& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diffusemapurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_diffusemapurl()) {
    diffusemapurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffusemapurl_);
  }
  roughnessmapurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roughnessmapurl()) {
    roughnessmapurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roughnessmapurl_);
  }
  metallicmapurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metallicmapurl()) {
    metallicmapurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metallicmapurl_);
  }
  if (from.has_diffusecolor()) {
    diffusecolor_ = new ::Color(*from.diffusecolor_);
  } else {
    diffusecolor_ = NULL;
  }
  ::memcpy(&roughness_, &from.roughness_,
    reinterpret_cast<char*>(&metallic_) -
    reinterpret_cast<char*>(&roughness_) + sizeof(metallic_));
  // @@protoc_insertion_point(copy_constructor:Material)
}

void Material::SharedCtor() {
  _cached_size_ = 0;
  diffusemapurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roughnessmapurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metallicmapurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&diffusecolor_, 0, reinterpret_cast<char*>(&metallic_) -
    reinterpret_cast<char*>(&diffusecolor_) + sizeof(metallic_));
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:Material)
  SharedDtor();
}

void Material::SharedDtor() {
  diffusemapurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roughnessmapurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metallicmapurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete diffusecolor_;
  }
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[5].descriptor;
}

const Material& Material::default_instance() {
  protobuf_SceneProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Material* Material::New(::google::protobuf::Arena* arena) const {
  Material* n = new Material;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:Material)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_diffusemapurl()) {
      GOOGLE_DCHECK(!diffusemapurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*diffusemapurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_roughnessmapurl()) {
      GOOGLE_DCHECK(!roughnessmapurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roughnessmapurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_metallicmapurl()) {
      GOOGLE_DCHECK(!metallicmapurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metallicmapurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_diffusecolor()) {
      GOOGLE_DCHECK(diffusecolor_ != NULL);
      diffusecolor_->::Color::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&roughness_, 0, reinterpret_cast<char*>(&metallic_) -
      reinterpret_cast<char*>(&roughness_) + sizeof(metallic_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Color diffuseColor = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffusecolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string diffuseMapURL = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffusemapurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->diffusemapurl().data(), this->diffusemapurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Material.diffuseMapURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roughness = 3;
      case 3: {
        if (tag == 29u) {
          set_has_roughness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roughness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string roughnessMapURL = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roughnessmapurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roughnessmapurl().data(), this->roughnessmapurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Material.roughnessMapURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float metallic = 5;
      case 5: {
        if (tag == 45u) {
          set_has_metallic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &metallic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string metallicMapURL = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metallicmapurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metallicmapurl().data(), this->metallicmapurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Material.metallicMapURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Material)
  return false;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Material)
  // optional .Color diffuseColor = 1;
  if (has_diffusecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->diffusecolor_, output);
  }

  // optional string diffuseMapURL = 2;
  if (has_diffusemapurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diffusemapurl().data(), this->diffusemapurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Material.diffuseMapURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->diffusemapurl(), output);
  }

  // optional float roughness = 3;
  if (has_roughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roughness(), output);
  }

  // optional string roughnessMapURL = 4;
  if (has_roughnessmapurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roughnessmapurl().data(), this->roughnessmapurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Material.roughnessMapURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roughnessmapurl(), output);
  }

  // optional float metallic = 5;
  if (has_metallic()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->metallic(), output);
  }

  // optional string metallicMapURL = 6;
  if (has_metallicmapurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metallicmapurl().data(), this->metallicmapurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Material.metallicMapURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->metallicmapurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Material)
}

::google::protobuf::uint8* Material::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Material)
  // optional .Color diffuseColor = 1;
  if (has_diffusecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->diffusecolor_, false, target);
  }

  // optional string diffuseMapURL = 2;
  if (has_diffusemapurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diffusemapurl().data(), this->diffusemapurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Material.diffuseMapURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->diffusemapurl(), target);
  }

  // optional float roughness = 3;
  if (has_roughness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roughness(), target);
  }

  // optional string roughnessMapURL = 4;
  if (has_roughnessmapurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roughnessmapurl().data(), this->roughnessmapurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Material.roughnessMapURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roughnessmapurl(), target);
  }

  // optional float metallic = 5;
  if (has_metallic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->metallic(), target);
  }

  // optional string metallicMapURL = 6;
  if (has_metallicmapurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metallicmapurl().data(), this->metallicmapurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Material.metallicMapURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->metallicmapurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Material)
  return target;
}

size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Material)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string diffuseMapURL = 2;
    if (has_diffusemapurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diffusemapurl());
    }

    // optional string roughnessMapURL = 4;
    if (has_roughnessmapurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roughnessmapurl());
    }

    // optional string metallicMapURL = 6;
    if (has_metallicmapurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metallicmapurl());
    }

    // optional .Color diffuseColor = 1;
    if (has_diffusecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->diffusecolor_);
    }

    // optional float roughness = 3;
    if (has_roughness()) {
      total_size += 1 + 4;
    }

    // optional float metallic = 5;
    if (has_metallic()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Material)
  GOOGLE_DCHECK_NE(&from, this);
  const Material* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Material>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Material)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Material)
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_diffusemapurl()) {
      set_has_diffusemapurl();
      diffusemapurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffusemapurl_);
    }
    if (from.has_roughnessmapurl()) {
      set_has_roughnessmapurl();
      roughnessmapurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roughnessmapurl_);
    }
    if (from.has_metallicmapurl()) {
      set_has_metallicmapurl();
      metallicmapurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metallicmapurl_);
    }
    if (from.has_diffusecolor()) {
      mutable_diffusecolor()->::Color::MergeFrom(from.diffusecolor());
    }
    if (from.has_roughness()) {
      set_roughness(from.roughness());
    }
    if (from.has_metallic()) {
      set_metallic(from.metallic());
    }
  }
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  if (has_diffusecolor()) {
    if (!this->diffusecolor_->IsInitialized()) return false;
  }
  return true;
}

void Material::Swap(Material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material::InternalSwap(Material* other) {
  diffusemapurl_.Swap(&other->diffusemapurl_);
  roughnessmapurl_.Swap(&other->roughnessmapurl_);
  metallicmapurl_.Swap(&other->metallicmapurl_);
  std::swap(diffusecolor_, other->diffusecolor_);
  std::swap(roughness_, other->roughness_);
  std::swap(metallic_, other->metallic_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Material

// optional .Color diffuseColor = 1;
bool Material::has_diffusecolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Material::set_has_diffusecolor() {
  _has_bits_[0] |= 0x00000008u;
}
void Material::clear_has_diffusecolor() {
  _has_bits_[0] &= ~0x00000008u;
}
void Material::clear_diffusecolor() {
  if (diffusecolor_ != NULL) diffusecolor_->::Color::Clear();
  clear_has_diffusecolor();
}
const ::Color& Material::diffusecolor() const {
  // @@protoc_insertion_point(field_get:Material.diffuseColor)
  return diffusecolor_ != NULL ? *diffusecolor_
                         : *::Color::internal_default_instance();
}
::Color* Material::mutable_diffusecolor() {
  set_has_diffusecolor();
  if (diffusecolor_ == NULL) {
    diffusecolor_ = new ::Color;
  }
  // @@protoc_insertion_point(field_mutable:Material.diffuseColor)
  return diffusecolor_;
}
::Color* Material::release_diffusecolor() {
  // @@protoc_insertion_point(field_release:Material.diffuseColor)
  clear_has_diffusecolor();
  ::Color* temp = diffusecolor_;
  diffusecolor_ = NULL;
  return temp;
}
void Material::set_allocated_diffusecolor(::Color* diffusecolor) {
  delete diffusecolor_;
  diffusecolor_ = diffusecolor;
  if (diffusecolor) {
    set_has_diffusecolor();
  } else {
    clear_has_diffusecolor();
  }
  // @@protoc_insertion_point(field_set_allocated:Material.diffuseColor)
}

// optional string diffuseMapURL = 2;
bool Material::has_diffusemapurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Material::set_has_diffusemapurl() {
  _has_bits_[0] |= 0x00000001u;
}
void Material::clear_has_diffusemapurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void Material::clear_diffusemapurl() {
  diffusemapurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_diffusemapurl();
}
const ::std::string& Material::diffusemapurl() const {
  // @@protoc_insertion_point(field_get:Material.diffuseMapURL)
  return diffusemapurl_.GetNoArena();
}
void Material::set_diffusemapurl(const ::std::string& value) {
  set_has_diffusemapurl();
  diffusemapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Material.diffuseMapURL)
}
#if LANG_CXX11
void Material::set_diffusemapurl(::std::string&& value) {
  set_has_diffusemapurl();
  diffusemapurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Material.diffuseMapURL)
}
#endif
void Material::set_diffusemapurl(const char* value) {
  set_has_diffusemapurl();
  diffusemapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Material.diffuseMapURL)
}
void Material::set_diffusemapurl(const char* value, size_t size) {
  set_has_diffusemapurl();
  diffusemapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Material.diffuseMapURL)
}
::std::string* Material::mutable_diffusemapurl() {
  set_has_diffusemapurl();
  // @@protoc_insertion_point(field_mutable:Material.diffuseMapURL)
  return diffusemapurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Material::release_diffusemapurl() {
  // @@protoc_insertion_point(field_release:Material.diffuseMapURL)
  clear_has_diffusemapurl();
  return diffusemapurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Material::set_allocated_diffusemapurl(::std::string* diffusemapurl) {
  if (diffusemapurl != NULL) {
    set_has_diffusemapurl();
  } else {
    clear_has_diffusemapurl();
  }
  diffusemapurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffusemapurl);
  // @@protoc_insertion_point(field_set_allocated:Material.diffuseMapURL)
}

// optional float roughness = 3;
bool Material::has_roughness() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Material::set_has_roughness() {
  _has_bits_[0] |= 0x00000010u;
}
void Material::clear_has_roughness() {
  _has_bits_[0] &= ~0x00000010u;
}
void Material::clear_roughness() {
  roughness_ = 0;
  clear_has_roughness();
}
float Material::roughness() const {
  // @@protoc_insertion_point(field_get:Material.roughness)
  return roughness_;
}
void Material::set_roughness(float value) {
  set_has_roughness();
  roughness_ = value;
  // @@protoc_insertion_point(field_set:Material.roughness)
}

// optional string roughnessMapURL = 4;
bool Material::has_roughnessmapurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Material::set_has_roughnessmapurl() {
  _has_bits_[0] |= 0x00000002u;
}
void Material::clear_has_roughnessmapurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void Material::clear_roughnessmapurl() {
  roughnessmapurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roughnessmapurl();
}
const ::std::string& Material::roughnessmapurl() const {
  // @@protoc_insertion_point(field_get:Material.roughnessMapURL)
  return roughnessmapurl_.GetNoArena();
}
void Material::set_roughnessmapurl(const ::std::string& value) {
  set_has_roughnessmapurl();
  roughnessmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Material.roughnessMapURL)
}
#if LANG_CXX11
void Material::set_roughnessmapurl(::std::string&& value) {
  set_has_roughnessmapurl();
  roughnessmapurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Material.roughnessMapURL)
}
#endif
void Material::set_roughnessmapurl(const char* value) {
  set_has_roughnessmapurl();
  roughnessmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Material.roughnessMapURL)
}
void Material::set_roughnessmapurl(const char* value, size_t size) {
  set_has_roughnessmapurl();
  roughnessmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Material.roughnessMapURL)
}
::std::string* Material::mutable_roughnessmapurl() {
  set_has_roughnessmapurl();
  // @@protoc_insertion_point(field_mutable:Material.roughnessMapURL)
  return roughnessmapurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Material::release_roughnessmapurl() {
  // @@protoc_insertion_point(field_release:Material.roughnessMapURL)
  clear_has_roughnessmapurl();
  return roughnessmapurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Material::set_allocated_roughnessmapurl(::std::string* roughnessmapurl) {
  if (roughnessmapurl != NULL) {
    set_has_roughnessmapurl();
  } else {
    clear_has_roughnessmapurl();
  }
  roughnessmapurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roughnessmapurl);
  // @@protoc_insertion_point(field_set_allocated:Material.roughnessMapURL)
}

// optional float metallic = 5;
bool Material::has_metallic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Material::set_has_metallic() {
  _has_bits_[0] |= 0x00000020u;
}
void Material::clear_has_metallic() {
  _has_bits_[0] &= ~0x00000020u;
}
void Material::clear_metallic() {
  metallic_ = 0;
  clear_has_metallic();
}
float Material::metallic() const {
  // @@protoc_insertion_point(field_get:Material.metallic)
  return metallic_;
}
void Material::set_metallic(float value) {
  set_has_metallic();
  metallic_ = value;
  // @@protoc_insertion_point(field_set:Material.metallic)
}

// optional string metallicMapURL = 6;
bool Material::has_metallicmapurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Material::set_has_metallicmapurl() {
  _has_bits_[0] |= 0x00000004u;
}
void Material::clear_has_metallicmapurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void Material::clear_metallicmapurl() {
  metallicmapurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metallicmapurl();
}
const ::std::string& Material::metallicmapurl() const {
  // @@protoc_insertion_point(field_get:Material.metallicMapURL)
  return metallicmapurl_.GetNoArena();
}
void Material::set_metallicmapurl(const ::std::string& value) {
  set_has_metallicmapurl();
  metallicmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Material.metallicMapURL)
}
#if LANG_CXX11
void Material::set_metallicmapurl(::std::string&& value) {
  set_has_metallicmapurl();
  metallicmapurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Material.metallicMapURL)
}
#endif
void Material::set_metallicmapurl(const char* value) {
  set_has_metallicmapurl();
  metallicmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Material.metallicMapURL)
}
void Material::set_metallicmapurl(const char* value, size_t size) {
  set_has_metallicmapurl();
  metallicmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Material.metallicMapURL)
}
::std::string* Material::mutable_metallicmapurl() {
  set_has_metallicmapurl();
  // @@protoc_insertion_point(field_mutable:Material.metallicMapURL)
  return metallicmapurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Material::release_metallicmapurl() {
  // @@protoc_insertion_point(field_release:Material.metallicMapURL)
  clear_has_metallicmapurl();
  return metallicmapurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Material::set_allocated_metallicmapurl(::std::string* metallicmapurl) {
  if (metallicmapurl != NULL) {
    set_has_metallicmapurl();
  } else {
    clear_has_metallicmapurl();
  }
  metallicmapurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metallicmapurl);
  // @@protoc_insertion_point(field_set_allocated:Material.metallicMapURL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneNode::kWorldTransformFieldNumber;
const int SceneNode::kMeshURLFieldNumber;
const int SceneNode::kMaterialsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneNode::SceneNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SceneProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SceneNode)
}
SceneNode::SceneNode(const SceneNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      materials_(from.materials_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  meshurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meshurl()) {
    meshurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meshurl_);
  }
  if (from.has_worldtransform()) {
    worldtransform_ = new ::Transform(*from.worldtransform_);
  } else {
    worldtransform_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SceneNode)
}

void SceneNode::SharedCtor() {
  _cached_size_ = 0;
  meshurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worldtransform_ = NULL;
}

SceneNode::~SceneNode() {
  // @@protoc_insertion_point(destructor:SceneNode)
  SharedDtor();
}

void SceneNode::SharedDtor() {
  meshurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete worldtransform_;
  }
}

void SceneNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneNode::descriptor() {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[6].descriptor;
}

const SceneNode& SceneNode::default_instance() {
  protobuf_SceneProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneNode* SceneNode::New(::google::protobuf::Arena* arena) const {
  SceneNode* n = new SceneNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneNode::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneNode)
  materials_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_meshurl()) {
      GOOGLE_DCHECK(!meshurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meshurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_worldtransform()) {
      GOOGLE_DCHECK(worldtransform_ != NULL);
      worldtransform_->::Transform::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SceneNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SceneNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Transform worldTransform = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldtransform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string meshURL = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meshurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meshurl().data(), this->meshurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SceneNode.meshURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Material materials = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_materials()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SceneNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SceneNode)
  return false;
#undef DO_
}

void SceneNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SceneNode)
  // required .Transform worldTransform = 1;
  if (has_worldtransform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->worldtransform_, output);
  }

  // required string meshURL = 2;
  if (has_meshurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meshurl().data(), this->meshurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SceneNode.meshURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->meshurl(), output);
  }

  // repeated .Material materials = 3;
  for (unsigned int i = 0, n = this->materials_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->materials(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SceneNode)
}

::google::protobuf::uint8* SceneNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SceneNode)
  // required .Transform worldTransform = 1;
  if (has_worldtransform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->worldtransform_, false, target);
  }

  // required string meshURL = 2;
  if (has_meshurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meshurl().data(), this->meshurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SceneNode.meshURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->meshurl(), target);
  }

  // repeated .Material materials = 3;
  for (unsigned int i = 0, n = this->materials_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->materials(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneNode)
  return target;
}

size_t SceneNode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SceneNode)
  size_t total_size = 0;

  if (has_meshurl()) {
    // required string meshURL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->meshurl());
  }

  if (has_worldtransform()) {
    // required .Transform worldTransform = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->worldtransform_);
  }

  return total_size;
}
size_t SceneNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string meshURL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->meshurl());

    // required .Transform worldTransform = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->worldtransform_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Material materials = 3;
  {
    unsigned int count = this->materials_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->materials(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneNode)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneNode)
    MergeFrom(*source);
  }
}

void SceneNode::MergeFrom(const SceneNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_meshurl()) {
      set_has_meshurl();
      meshurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meshurl_);
    }
    if (from.has_worldtransform()) {
      mutable_worldtransform()->::Transform::MergeFrom(from.worldtransform());
    }
  }
}

void SceneNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneNode::CopyFrom(const SceneNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->materials())) return false;
  if (has_worldtransform()) {
    if (!this->worldtransform_->IsInitialized()) return false;
  }
  return true;
}

void SceneNode::Swap(SceneNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneNode::InternalSwap(SceneNode* other) {
  materials_.UnsafeArenaSwap(&other->materials_);
  meshurl_.Swap(&other->meshurl_);
  std::swap(worldtransform_, other->worldtransform_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneNode::GetMetadata() const {
  protobuf_SceneProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SceneProtocol_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneNode

// required .Transform worldTransform = 1;
bool SceneNode::has_worldtransform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SceneNode::set_has_worldtransform() {
  _has_bits_[0] |= 0x00000002u;
}
void SceneNode::clear_has_worldtransform() {
  _has_bits_[0] &= ~0x00000002u;
}
void SceneNode::clear_worldtransform() {
  if (worldtransform_ != NULL) worldtransform_->::Transform::Clear();
  clear_has_worldtransform();
}
const ::Transform& SceneNode::worldtransform() const {
  // @@protoc_insertion_point(field_get:SceneNode.worldTransform)
  return worldtransform_ != NULL ? *worldtransform_
                         : *::Transform::internal_default_instance();
}
::Transform* SceneNode::mutable_worldtransform() {
  set_has_worldtransform();
  if (worldtransform_ == NULL) {
    worldtransform_ = new ::Transform;
  }
  // @@protoc_insertion_point(field_mutable:SceneNode.worldTransform)
  return worldtransform_;
}
::Transform* SceneNode::release_worldtransform() {
  // @@protoc_insertion_point(field_release:SceneNode.worldTransform)
  clear_has_worldtransform();
  ::Transform* temp = worldtransform_;
  worldtransform_ = NULL;
  return temp;
}
void SceneNode::set_allocated_worldtransform(::Transform* worldtransform) {
  delete worldtransform_;
  worldtransform_ = worldtransform;
  if (worldtransform) {
    set_has_worldtransform();
  } else {
    clear_has_worldtransform();
  }
  // @@protoc_insertion_point(field_set_allocated:SceneNode.worldTransform)
}

// required string meshURL = 2;
bool SceneNode::has_meshurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SceneNode::set_has_meshurl() {
  _has_bits_[0] |= 0x00000001u;
}
void SceneNode::clear_has_meshurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void SceneNode::clear_meshurl() {
  meshurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meshurl();
}
const ::std::string& SceneNode::meshurl() const {
  // @@protoc_insertion_point(field_get:SceneNode.meshURL)
  return meshurl_.GetNoArena();
}
void SceneNode::set_meshurl(const ::std::string& value) {
  set_has_meshurl();
  meshurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SceneNode.meshURL)
}
#if LANG_CXX11
void SceneNode::set_meshurl(::std::string&& value) {
  set_has_meshurl();
  meshurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SceneNode.meshURL)
}
#endif
void SceneNode::set_meshurl(const char* value) {
  set_has_meshurl();
  meshurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SceneNode.meshURL)
}
void SceneNode::set_meshurl(const char* value, size_t size) {
  set_has_meshurl();
  meshurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SceneNode.meshURL)
}
::std::string* SceneNode::mutable_meshurl() {
  set_has_meshurl();
  // @@protoc_insertion_point(field_mutable:SceneNode.meshURL)
  return meshurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SceneNode::release_meshurl() {
  // @@protoc_insertion_point(field_release:SceneNode.meshURL)
  clear_has_meshurl();
  return meshurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SceneNode::set_allocated_meshurl(::std::string* meshurl) {
  if (meshurl != NULL) {
    set_has_meshurl();
  } else {
    clear_has_meshurl();
  }
  meshurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meshurl);
  // @@protoc_insertion_point(field_set_allocated:SceneNode.meshURL)
}

// repeated .Material materials = 3;
int SceneNode::materials_size() const {
  return materials_.size();
}
void SceneNode::clear_materials() {
  materials_.Clear();
}
const ::Material& SceneNode::materials(int index) const {
  // @@protoc_insertion_point(field_get:SceneNode.materials)
  return materials_.Get(index);
}
::Material* SceneNode::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:SceneNode.materials)
  return materials_.Mutable(index);
}
::Material* SceneNode::add_materials() {
  // @@protoc_insertion_point(field_add:SceneNode.materials)
  return materials_.Add();
}
::google::protobuf::RepeatedPtrField< ::Material >*
SceneNode::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:SceneNode.materials)
  return &materials_;
}
const ::google::protobuf::RepeatedPtrField< ::Material >&
SceneNode::materials() const {
  // @@protoc_insertion_point(field_list:SceneNode.materials)
  return materials_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
