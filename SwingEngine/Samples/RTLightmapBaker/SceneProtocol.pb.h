// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneProtocol.proto

#ifndef PROTOBUF_SceneProtocol_2eproto__INCLUDED
#define PROTOBUF_SceneProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class PBColor;
class PBColorDefaultTypeInternal;
extern PBColorDefaultTypeInternal _PBColor_default_instance_;
class PBMaterial;
class PBMaterialDefaultTypeInternal;
extern PBMaterialDefaultTypeInternal _PBMaterial_default_instance_;
class PBQuaternion;
class PBQuaternionDefaultTypeInternal;
extern PBQuaternionDefaultTypeInternal _PBQuaternion_default_instance_;
class PBScene;
class PBSceneDefaultTypeInternal;
extern PBSceneDefaultTypeInternal _PBScene_default_instance_;
class PBSceneNode;
class PBSceneNodeDefaultTypeInternal;
extern PBSceneNodeDefaultTypeInternal _PBSceneNode_default_instance_;
class PBTransform;
class PBTransformDefaultTypeInternal;
extern PBTransformDefaultTypeInternal _PBTransform_default_instance_;
class PBVector3;
class PBVector3DefaultTypeInternal;
extern PBVector3DefaultTypeInternal _PBVector3_default_instance_;
class PBVector4;
class PBVector4DefaultTypeInternal;
extern PBVector4DefaultTypeInternal _PBVector4_default_instance_;

namespace protobuf_SceneProtocol_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_SceneProtocol_2eproto

// ===================================================================

class PBVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBVector3) */ {
 public:
  PBVector3();
  virtual ~PBVector3();

  PBVector3(const PBVector3& from);

  inline PBVector3& operator=(const PBVector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBVector3& default_instance();

  static inline const PBVector3* internal_default_instance() {
    return reinterpret_cast<const PBVector3*>(
               &_PBVector3_default_instance_);
  }

  void Swap(PBVector3* other);

  // implements Message ----------------------------------------------

  inline PBVector3* New() const PROTOBUF_FINAL { return New(NULL); }

  PBVector3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBVector3& from);
  void MergeFrom(const PBVector3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBVector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:PBVector3)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct  protobuf_SceneProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBVector4 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBVector4) */ {
 public:
  PBVector4();
  virtual ~PBVector4();

  PBVector4(const PBVector4& from);

  inline PBVector4& operator=(const PBVector4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBVector4& default_instance();

  static inline const PBVector4* internal_default_instance() {
    return reinterpret_cast<const PBVector4*>(
               &_PBVector4_default_instance_);
  }

  void Swap(PBVector4* other);

  // implements Message ----------------------------------------------

  inline PBVector4* New() const PROTOBUF_FINAL { return New(NULL); }

  PBVector4* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBVector4& from);
  void MergeFrom(const PBVector4& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBVector4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // required float w = 4;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:PBVector4)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_w();
  void clear_has_w();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  float w_;
  friend struct  protobuf_SceneProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBQuaternion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBQuaternion) */ {
 public:
  PBQuaternion();
  virtual ~PBQuaternion();

  PBQuaternion(const PBQuaternion& from);

  inline PBQuaternion& operator=(const PBQuaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBQuaternion& default_instance();

  static inline const PBQuaternion* internal_default_instance() {
    return reinterpret_cast<const PBQuaternion*>(
               &_PBQuaternion_default_instance_);
  }

  void Swap(PBQuaternion* other);

  // implements Message ----------------------------------------------

  inline PBQuaternion* New() const PROTOBUF_FINAL { return New(NULL); }

  PBQuaternion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBQuaternion& from);
  void MergeFrom(const PBQuaternion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBQuaternion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // required float w = 4;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:PBQuaternion)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_w();
  void clear_has_w();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  float w_;
  friend struct  protobuf_SceneProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBTransform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBTransform) */ {
 public:
  PBTransform();
  virtual ~PBTransform();

  PBTransform(const PBTransform& from);

  inline PBTransform& operator=(const PBTransform& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTransform& default_instance();

  static inline const PBTransform* internal_default_instance() {
    return reinterpret_cast<const PBTransform*>(
               &_PBTransform_default_instance_);
  }

  void Swap(PBTransform* other);

  // implements Message ----------------------------------------------

  inline PBTransform* New() const PROTOBUF_FINAL { return New(NULL); }

  PBTransform* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBTransform& from);
  void MergeFrom(const PBTransform& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBTransform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PBVector3 scale = 1;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  const ::PBVector3& scale() const;
  ::PBVector3* mutable_scale();
  ::PBVector3* release_scale();
  void set_allocated_scale(::PBVector3* scale);

  // required .PBQuaternion orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  const ::PBQuaternion& orientation() const;
  ::PBQuaternion* mutable_orientation();
  ::PBQuaternion* release_orientation();
  void set_allocated_orientation(::PBQuaternion* orientation);

  // required .PBVector3 translation = 3;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 3;
  const ::PBVector3& translation() const;
  ::PBVector3* mutable_translation();
  ::PBVector3* release_translation();
  void set_allocated_translation(::PBVector3* translation);

  // @@protoc_insertion_point(class_scope:PBTransform)
 private:
  void set_has_scale();
  void clear_has_scale();
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_translation();
  void clear_has_translation();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::PBVector3* scale_;
  ::PBQuaternion* orientation_;
  ::PBVector3* translation_;
  friend struct  protobuf_SceneProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBColor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBColor) */ {
 public:
  PBColor();
  virtual ~PBColor();

  PBColor(const PBColor& from);

  inline PBColor& operator=(const PBColor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBColor& default_instance();

  static inline const PBColor* internal_default_instance() {
    return reinterpret_cast<const PBColor*>(
               &_PBColor_default_instance_);
  }

  void Swap(PBColor* other);

  // implements Message ----------------------------------------------

  inline PBColor* New() const PROTOBUF_FINAL { return New(NULL); }

  PBColor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBColor& from);
  void MergeFrom(const PBColor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBColor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float r = 1;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 1;
  float r() const;
  void set_r(float value);

  // required float g = 2;
  bool has_g() const;
  void clear_g();
  static const int kGFieldNumber = 2;
  float g() const;
  void set_g(float value);

  // required float b = 3;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 3;
  float b() const;
  void set_b(float value);

  // required float a = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  float a() const;
  void set_a(float value);

  // @@protoc_insertion_point(class_scope:PBColor)
 private:
  void set_has_r();
  void clear_has_r();
  void set_has_g();
  void clear_has_g();
  void set_has_b();
  void clear_has_b();
  void set_has_a();
  void clear_has_a();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float r_;
  float g_;
  float b_;
  float a_;
  friend struct  protobuf_SceneProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBMaterial : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBMaterial) */ {
 public:
  PBMaterial();
  virtual ~PBMaterial();

  PBMaterial(const PBMaterial& from);

  inline PBMaterial& operator=(const PBMaterial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMaterial& default_instance();

  static inline const PBMaterial* internal_default_instance() {
    return reinterpret_cast<const PBMaterial*>(
               &_PBMaterial_default_instance_);
  }

  void Swap(PBMaterial* other);

  // implements Message ----------------------------------------------

  inline PBMaterial* New() const PROTOBUF_FINAL { return New(NULL); }

  PBMaterial* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBMaterial& from);
  void MergeFrom(const PBMaterial& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBMaterial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string diffuseMapURL = 2;
  bool has_diffusemapurl() const;
  void clear_diffusemapurl();
  static const int kDiffuseMapURLFieldNumber = 2;
  const ::std::string& diffusemapurl() const;
  void set_diffusemapurl(const ::std::string& value);
  #if LANG_CXX11
  void set_diffusemapurl(::std::string&& value);
  #endif
  void set_diffusemapurl(const char* value);
  void set_diffusemapurl(const char* value, size_t size);
  ::std::string* mutable_diffusemapurl();
  ::std::string* release_diffusemapurl();
  void set_allocated_diffusemapurl(::std::string* diffusemapurl);

  // optional string roughnessMapURL = 4;
  bool has_roughnessmapurl() const;
  void clear_roughnessmapurl();
  static const int kRoughnessMapURLFieldNumber = 4;
  const ::std::string& roughnessmapurl() const;
  void set_roughnessmapurl(const ::std::string& value);
  #if LANG_CXX11
  void set_roughnessmapurl(::std::string&& value);
  #endif
  void set_roughnessmapurl(const char* value);
  void set_roughnessmapurl(const char* value, size_t size);
  ::std::string* mutable_roughnessmapurl();
  ::std::string* release_roughnessmapurl();
  void set_allocated_roughnessmapurl(::std::string* roughnessmapurl);

  // optional string metallicMapURL = 6;
  bool has_metallicmapurl() const;
  void clear_metallicmapurl();
  static const int kMetallicMapURLFieldNumber = 6;
  const ::std::string& metallicmapurl() const;
  void set_metallicmapurl(const ::std::string& value);
  #if LANG_CXX11
  void set_metallicmapurl(::std::string&& value);
  #endif
  void set_metallicmapurl(const char* value);
  void set_metallicmapurl(const char* value, size_t size);
  ::std::string* mutable_metallicmapurl();
  ::std::string* release_metallicmapurl();
  void set_allocated_metallicmapurl(::std::string* metallicmapurl);

  // optional string normalMapURL = 7;
  bool has_normalmapurl() const;
  void clear_normalmapurl();
  static const int kNormalMapURLFieldNumber = 7;
  const ::std::string& normalmapurl() const;
  void set_normalmapurl(const ::std::string& value);
  #if LANG_CXX11
  void set_normalmapurl(::std::string&& value);
  #endif
  void set_normalmapurl(const char* value);
  void set_normalmapurl(const char* value, size_t size);
  ::std::string* mutable_normalmapurl();
  ::std::string* release_normalmapurl();
  void set_allocated_normalmapurl(::std::string* normalmapurl);

  // optional .PBColor diffuseColor = 1;
  bool has_diffusecolor() const;
  void clear_diffusecolor();
  static const int kDiffuseColorFieldNumber = 1;
  const ::PBColor& diffusecolor() const;
  ::PBColor* mutable_diffusecolor();
  ::PBColor* release_diffusecolor();
  void set_allocated_diffusecolor(::PBColor* diffusecolor);

  // optional float roughness = 3;
  bool has_roughness() const;
  void clear_roughness();
  static const int kRoughnessFieldNumber = 3;
  float roughness() const;
  void set_roughness(float value);

  // optional float metallic = 5;
  bool has_metallic() const;
  void clear_metallic();
  static const int kMetallicFieldNumber = 5;
  float metallic() const;
  void set_metallic(float value);

  // @@protoc_insertion_point(class_scope:PBMaterial)
 private:
  void set_has_diffusecolor();
  void clear_has_diffusecolor();
  void set_has_diffusemapurl();
  void clear_has_diffusemapurl();
  void set_has_roughness();
  void clear_has_roughness();
  void set_has_roughnessmapurl();
  void clear_has_roughnessmapurl();
  void set_has_metallic();
  void clear_has_metallic();
  void set_has_metallicmapurl();
  void clear_has_metallicmapurl();
  void set_has_normalmapurl();
  void clear_has_normalmapurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr diffusemapurl_;
  ::google::protobuf::internal::ArenaStringPtr roughnessmapurl_;
  ::google::protobuf::internal::ArenaStringPtr metallicmapurl_;
  ::google::protobuf::internal::ArenaStringPtr normalmapurl_;
  ::PBColor* diffusecolor_;
  float roughness_;
  float metallic_;
  friend struct  protobuf_SceneProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBSceneNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBSceneNode) */ {
 public:
  PBSceneNode();
  virtual ~PBSceneNode();

  PBSceneNode(const PBSceneNode& from);

  inline PBSceneNode& operator=(const PBSceneNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneNode& default_instance();

  static inline const PBSceneNode* internal_default_instance() {
    return reinterpret_cast<const PBSceneNode*>(
               &_PBSceneNode_default_instance_);
  }

  void Swap(PBSceneNode* other);

  // implements Message ----------------------------------------------

  inline PBSceneNode* New() const PROTOBUF_FINAL { return New(NULL); }

  PBSceneNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBSceneNode& from);
  void MergeFrom(const PBSceneNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBSceneNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PBMaterial materials = 3;
  int materials_size() const;
  void clear_materials();
  static const int kMaterialsFieldNumber = 3;
  const ::PBMaterial& materials(int index) const;
  ::PBMaterial* mutable_materials(int index);
  ::PBMaterial* add_materials();
  ::google::protobuf::RepeatedPtrField< ::PBMaterial >*
      mutable_materials();
  const ::google::protobuf::RepeatedPtrField< ::PBMaterial >&
      materials() const;

  // required string meshURL = 2;
  bool has_meshurl() const;
  void clear_meshurl();
  static const int kMeshURLFieldNumber = 2;
  const ::std::string& meshurl() const;
  void set_meshurl(const ::std::string& value);
  #if LANG_CXX11
  void set_meshurl(::std::string&& value);
  #endif
  void set_meshurl(const char* value);
  void set_meshurl(const char* value, size_t size);
  ::std::string* mutable_meshurl();
  ::std::string* release_meshurl();
  void set_allocated_meshurl(::std::string* meshurl);

  // required .PBTransform worldTransform = 1;
  bool has_worldtransform() const;
  void clear_worldtransform();
  static const int kWorldTransformFieldNumber = 1;
  const ::PBTransform& worldtransform() const;
  ::PBTransform* mutable_worldtransform();
  ::PBTransform* release_worldtransform();
  void set_allocated_worldtransform(::PBTransform* worldtransform);

  // @@protoc_insertion_point(class_scope:PBSceneNode)
 private:
  void set_has_worldtransform();
  void clear_has_worldtransform();
  void set_has_meshurl();
  void clear_has_meshurl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PBMaterial > materials_;
  ::google::protobuf::internal::ArenaStringPtr meshurl_;
  ::PBTransform* worldtransform_;
  friend struct  protobuf_SceneProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBScene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBScene) */ {
 public:
  PBScene();
  virtual ~PBScene();

  PBScene(const PBScene& from);

  inline PBScene& operator=(const PBScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBScene& default_instance();

  static inline const PBScene* internal_default_instance() {
    return reinterpret_cast<const PBScene*>(
               &_PBScene_default_instance_);
  }

  void Swap(PBScene* other);

  // implements Message ----------------------------------------------

  inline PBScene* New() const PROTOBUF_FINAL { return New(NULL); }

  PBScene* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBScene& from);
  void MergeFrom(const PBScene& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBScene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PBSceneNode sceneNodes = 1;
  int scenenodes_size() const;
  void clear_scenenodes();
  static const int kSceneNodesFieldNumber = 1;
  const ::PBSceneNode& scenenodes(int index) const;
  ::PBSceneNode* mutable_scenenodes(int index);
  ::PBSceneNode* add_scenenodes();
  ::google::protobuf::RepeatedPtrField< ::PBSceneNode >*
      mutable_scenenodes();
  const ::google::protobuf::RepeatedPtrField< ::PBSceneNode >&
      scenenodes() const;

  // @@protoc_insertion_point(class_scope:PBScene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PBSceneNode > scenenodes_;
  friend struct  protobuf_SceneProtocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PBVector3

// required float x = 1;
inline bool PBVector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBVector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBVector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBVector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PBVector3::x() const {
  // @@protoc_insertion_point(field_get:PBVector3.x)
  return x_;
}
inline void PBVector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:PBVector3.x)
}

// required float y = 2;
inline bool PBVector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBVector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBVector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBVector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PBVector3::y() const {
  // @@protoc_insertion_point(field_get:PBVector3.y)
  return y_;
}
inline void PBVector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:PBVector3.y)
}

// required float z = 3;
inline bool PBVector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBVector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBVector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBVector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PBVector3::z() const {
  // @@protoc_insertion_point(field_get:PBVector3.z)
  return z_;
}
inline void PBVector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:PBVector3.z)
}

// -------------------------------------------------------------------

// PBVector4

// required float x = 1;
inline bool PBVector4::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBVector4::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBVector4::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBVector4::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PBVector4::x() const {
  // @@protoc_insertion_point(field_get:PBVector4.x)
  return x_;
}
inline void PBVector4::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:PBVector4.x)
}

// required float y = 2;
inline bool PBVector4::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBVector4::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBVector4::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBVector4::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PBVector4::y() const {
  // @@protoc_insertion_point(field_get:PBVector4.y)
  return y_;
}
inline void PBVector4::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:PBVector4.y)
}

// required float z = 3;
inline bool PBVector4::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBVector4::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBVector4::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBVector4::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PBVector4::z() const {
  // @@protoc_insertion_point(field_get:PBVector4.z)
  return z_;
}
inline void PBVector4::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:PBVector4.z)
}

// required float w = 4;
inline bool PBVector4::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBVector4::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBVector4::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBVector4::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float PBVector4::w() const {
  // @@protoc_insertion_point(field_get:PBVector4.w)
  return w_;
}
inline void PBVector4::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:PBVector4.w)
}

// -------------------------------------------------------------------

// PBQuaternion

// required float x = 1;
inline bool PBQuaternion::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBQuaternion::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBQuaternion::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBQuaternion::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PBQuaternion::x() const {
  // @@protoc_insertion_point(field_get:PBQuaternion.x)
  return x_;
}
inline void PBQuaternion::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:PBQuaternion.x)
}

// required float y = 2;
inline bool PBQuaternion::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBQuaternion::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBQuaternion::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBQuaternion::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PBQuaternion::y() const {
  // @@protoc_insertion_point(field_get:PBQuaternion.y)
  return y_;
}
inline void PBQuaternion::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:PBQuaternion.y)
}

// required float z = 3;
inline bool PBQuaternion::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBQuaternion::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBQuaternion::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBQuaternion::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PBQuaternion::z() const {
  // @@protoc_insertion_point(field_get:PBQuaternion.z)
  return z_;
}
inline void PBQuaternion::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:PBQuaternion.z)
}

// required float w = 4;
inline bool PBQuaternion::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBQuaternion::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBQuaternion::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBQuaternion::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float PBQuaternion::w() const {
  // @@protoc_insertion_point(field_get:PBQuaternion.w)
  return w_;
}
inline void PBQuaternion::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:PBQuaternion.w)
}

// -------------------------------------------------------------------

// PBTransform

// required .PBVector3 scale = 1;
inline bool PBTransform::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBTransform::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBTransform::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBTransform::clear_scale() {
  if (scale_ != NULL) scale_->::PBVector3::Clear();
  clear_has_scale();
}
inline const ::PBVector3& PBTransform::scale() const {
  // @@protoc_insertion_point(field_get:PBTransform.scale)
  return scale_ != NULL ? *scale_
                         : *::PBVector3::internal_default_instance();
}
inline ::PBVector3* PBTransform::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) {
    scale_ = new ::PBVector3;
  }
  // @@protoc_insertion_point(field_mutable:PBTransform.scale)
  return scale_;
}
inline ::PBVector3* PBTransform::release_scale() {
  // @@protoc_insertion_point(field_release:PBTransform.scale)
  clear_has_scale();
  ::PBVector3* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void PBTransform::set_allocated_scale(::PBVector3* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:PBTransform.scale)
}

// required .PBQuaternion orientation = 2;
inline bool PBTransform::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBTransform::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBTransform::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBTransform::clear_orientation() {
  if (orientation_ != NULL) orientation_->::PBQuaternion::Clear();
  clear_has_orientation();
}
inline const ::PBQuaternion& PBTransform::orientation() const {
  // @@protoc_insertion_point(field_get:PBTransform.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::PBQuaternion::internal_default_instance();
}
inline ::PBQuaternion* PBTransform::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::PBQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:PBTransform.orientation)
  return orientation_;
}
inline ::PBQuaternion* PBTransform::release_orientation() {
  // @@protoc_insertion_point(field_release:PBTransform.orientation)
  clear_has_orientation();
  ::PBQuaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void PBTransform::set_allocated_orientation(::PBQuaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:PBTransform.orientation)
}

// required .PBVector3 translation = 3;
inline bool PBTransform::has_translation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBTransform::set_has_translation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBTransform::clear_has_translation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBTransform::clear_translation() {
  if (translation_ != NULL) translation_->::PBVector3::Clear();
  clear_has_translation();
}
inline const ::PBVector3& PBTransform::translation() const {
  // @@protoc_insertion_point(field_get:PBTransform.translation)
  return translation_ != NULL ? *translation_
                         : *::PBVector3::internal_default_instance();
}
inline ::PBVector3* PBTransform::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::PBVector3;
  }
  // @@protoc_insertion_point(field_mutable:PBTransform.translation)
  return translation_;
}
inline ::PBVector3* PBTransform::release_translation() {
  // @@protoc_insertion_point(field_release:PBTransform.translation)
  clear_has_translation();
  ::PBVector3* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void PBTransform::set_allocated_translation(::PBVector3* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:PBTransform.translation)
}

// -------------------------------------------------------------------

// PBColor

// required float r = 1;
inline bool PBColor::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBColor::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBColor::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBColor::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float PBColor::r() const {
  // @@protoc_insertion_point(field_get:PBColor.r)
  return r_;
}
inline void PBColor::set_r(float value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:PBColor.r)
}

// required float g = 2;
inline bool PBColor::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBColor::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBColor::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBColor::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float PBColor::g() const {
  // @@protoc_insertion_point(field_get:PBColor.g)
  return g_;
}
inline void PBColor::set_g(float value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:PBColor.g)
}

// required float b = 3;
inline bool PBColor::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBColor::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBColor::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBColor::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float PBColor::b() const {
  // @@protoc_insertion_point(field_get:PBColor.b)
  return b_;
}
inline void PBColor::set_b(float value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:PBColor.b)
}

// required float a = 4;
inline bool PBColor::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBColor::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBColor::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBColor::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float PBColor::a() const {
  // @@protoc_insertion_point(field_get:PBColor.a)
  return a_;
}
inline void PBColor::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:PBColor.a)
}

// -------------------------------------------------------------------

// PBMaterial

// optional .PBColor diffuseColor = 1;
inline bool PBMaterial::has_diffusecolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBMaterial::set_has_diffusecolor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBMaterial::clear_has_diffusecolor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBMaterial::clear_diffusecolor() {
  if (diffusecolor_ != NULL) diffusecolor_->::PBColor::Clear();
  clear_has_diffusecolor();
}
inline const ::PBColor& PBMaterial::diffusecolor() const {
  // @@protoc_insertion_point(field_get:PBMaterial.diffuseColor)
  return diffusecolor_ != NULL ? *diffusecolor_
                         : *::PBColor::internal_default_instance();
}
inline ::PBColor* PBMaterial::mutable_diffusecolor() {
  set_has_diffusecolor();
  if (diffusecolor_ == NULL) {
    diffusecolor_ = new ::PBColor;
  }
  // @@protoc_insertion_point(field_mutable:PBMaterial.diffuseColor)
  return diffusecolor_;
}
inline ::PBColor* PBMaterial::release_diffusecolor() {
  // @@protoc_insertion_point(field_release:PBMaterial.diffuseColor)
  clear_has_diffusecolor();
  ::PBColor* temp = diffusecolor_;
  diffusecolor_ = NULL;
  return temp;
}
inline void PBMaterial::set_allocated_diffusecolor(::PBColor* diffusecolor) {
  delete diffusecolor_;
  diffusecolor_ = diffusecolor;
  if (diffusecolor) {
    set_has_diffusecolor();
  } else {
    clear_has_diffusecolor();
  }
  // @@protoc_insertion_point(field_set_allocated:PBMaterial.diffuseColor)
}

// optional string diffuseMapURL = 2;
inline bool PBMaterial::has_diffusemapurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMaterial::set_has_diffusemapurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMaterial::clear_has_diffusemapurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMaterial::clear_diffusemapurl() {
  diffusemapurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_diffusemapurl();
}
inline const ::std::string& PBMaterial::diffusemapurl() const {
  // @@protoc_insertion_point(field_get:PBMaterial.diffuseMapURL)
  return diffusemapurl_.GetNoArena();
}
inline void PBMaterial::set_diffusemapurl(const ::std::string& value) {
  set_has_diffusemapurl();
  diffusemapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMaterial.diffuseMapURL)
}
#if LANG_CXX11
inline void PBMaterial::set_diffusemapurl(::std::string&& value) {
  set_has_diffusemapurl();
  diffusemapurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMaterial.diffuseMapURL)
}
#endif
inline void PBMaterial::set_diffusemapurl(const char* value) {
  set_has_diffusemapurl();
  diffusemapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMaterial.diffuseMapURL)
}
inline void PBMaterial::set_diffusemapurl(const char* value, size_t size) {
  set_has_diffusemapurl();
  diffusemapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMaterial.diffuseMapURL)
}
inline ::std::string* PBMaterial::mutable_diffusemapurl() {
  set_has_diffusemapurl();
  // @@protoc_insertion_point(field_mutable:PBMaterial.diffuseMapURL)
  return diffusemapurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMaterial::release_diffusemapurl() {
  // @@protoc_insertion_point(field_release:PBMaterial.diffuseMapURL)
  clear_has_diffusemapurl();
  return diffusemapurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMaterial::set_allocated_diffusemapurl(::std::string* diffusemapurl) {
  if (diffusemapurl != NULL) {
    set_has_diffusemapurl();
  } else {
    clear_has_diffusemapurl();
  }
  diffusemapurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffusemapurl);
  // @@protoc_insertion_point(field_set_allocated:PBMaterial.diffuseMapURL)
}

// optional float roughness = 3;
inline bool PBMaterial::has_roughness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBMaterial::set_has_roughness() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBMaterial::clear_has_roughness() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBMaterial::clear_roughness() {
  roughness_ = 0;
  clear_has_roughness();
}
inline float PBMaterial::roughness() const {
  // @@protoc_insertion_point(field_get:PBMaterial.roughness)
  return roughness_;
}
inline void PBMaterial::set_roughness(float value) {
  set_has_roughness();
  roughness_ = value;
  // @@protoc_insertion_point(field_set:PBMaterial.roughness)
}

// optional string roughnessMapURL = 4;
inline bool PBMaterial::has_roughnessmapurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMaterial::set_has_roughnessmapurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMaterial::clear_has_roughnessmapurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMaterial::clear_roughnessmapurl() {
  roughnessmapurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roughnessmapurl();
}
inline const ::std::string& PBMaterial::roughnessmapurl() const {
  // @@protoc_insertion_point(field_get:PBMaterial.roughnessMapURL)
  return roughnessmapurl_.GetNoArena();
}
inline void PBMaterial::set_roughnessmapurl(const ::std::string& value) {
  set_has_roughnessmapurl();
  roughnessmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMaterial.roughnessMapURL)
}
#if LANG_CXX11
inline void PBMaterial::set_roughnessmapurl(::std::string&& value) {
  set_has_roughnessmapurl();
  roughnessmapurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMaterial.roughnessMapURL)
}
#endif
inline void PBMaterial::set_roughnessmapurl(const char* value) {
  set_has_roughnessmapurl();
  roughnessmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMaterial.roughnessMapURL)
}
inline void PBMaterial::set_roughnessmapurl(const char* value, size_t size) {
  set_has_roughnessmapurl();
  roughnessmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMaterial.roughnessMapURL)
}
inline ::std::string* PBMaterial::mutable_roughnessmapurl() {
  set_has_roughnessmapurl();
  // @@protoc_insertion_point(field_mutable:PBMaterial.roughnessMapURL)
  return roughnessmapurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMaterial::release_roughnessmapurl() {
  // @@protoc_insertion_point(field_release:PBMaterial.roughnessMapURL)
  clear_has_roughnessmapurl();
  return roughnessmapurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMaterial::set_allocated_roughnessmapurl(::std::string* roughnessmapurl) {
  if (roughnessmapurl != NULL) {
    set_has_roughnessmapurl();
  } else {
    clear_has_roughnessmapurl();
  }
  roughnessmapurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roughnessmapurl);
  // @@protoc_insertion_point(field_set_allocated:PBMaterial.roughnessMapURL)
}

// optional float metallic = 5;
inline bool PBMaterial::has_metallic() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBMaterial::set_has_metallic() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBMaterial::clear_has_metallic() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBMaterial::clear_metallic() {
  metallic_ = 0;
  clear_has_metallic();
}
inline float PBMaterial::metallic() const {
  // @@protoc_insertion_point(field_get:PBMaterial.metallic)
  return metallic_;
}
inline void PBMaterial::set_metallic(float value) {
  set_has_metallic();
  metallic_ = value;
  // @@protoc_insertion_point(field_set:PBMaterial.metallic)
}

// optional string metallicMapURL = 6;
inline bool PBMaterial::has_metallicmapurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMaterial::set_has_metallicmapurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMaterial::clear_has_metallicmapurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMaterial::clear_metallicmapurl() {
  metallicmapurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metallicmapurl();
}
inline const ::std::string& PBMaterial::metallicmapurl() const {
  // @@protoc_insertion_point(field_get:PBMaterial.metallicMapURL)
  return metallicmapurl_.GetNoArena();
}
inline void PBMaterial::set_metallicmapurl(const ::std::string& value) {
  set_has_metallicmapurl();
  metallicmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMaterial.metallicMapURL)
}
#if LANG_CXX11
inline void PBMaterial::set_metallicmapurl(::std::string&& value) {
  set_has_metallicmapurl();
  metallicmapurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMaterial.metallicMapURL)
}
#endif
inline void PBMaterial::set_metallicmapurl(const char* value) {
  set_has_metallicmapurl();
  metallicmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMaterial.metallicMapURL)
}
inline void PBMaterial::set_metallicmapurl(const char* value, size_t size) {
  set_has_metallicmapurl();
  metallicmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMaterial.metallicMapURL)
}
inline ::std::string* PBMaterial::mutable_metallicmapurl() {
  set_has_metallicmapurl();
  // @@protoc_insertion_point(field_mutable:PBMaterial.metallicMapURL)
  return metallicmapurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMaterial::release_metallicmapurl() {
  // @@protoc_insertion_point(field_release:PBMaterial.metallicMapURL)
  clear_has_metallicmapurl();
  return metallicmapurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMaterial::set_allocated_metallicmapurl(::std::string* metallicmapurl) {
  if (metallicmapurl != NULL) {
    set_has_metallicmapurl();
  } else {
    clear_has_metallicmapurl();
  }
  metallicmapurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metallicmapurl);
  // @@protoc_insertion_point(field_set_allocated:PBMaterial.metallicMapURL)
}

// optional string normalMapURL = 7;
inline bool PBMaterial::has_normalmapurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBMaterial::set_has_normalmapurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBMaterial::clear_has_normalmapurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBMaterial::clear_normalmapurl() {
  normalmapurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normalmapurl();
}
inline const ::std::string& PBMaterial::normalmapurl() const {
  // @@protoc_insertion_point(field_get:PBMaterial.normalMapURL)
  return normalmapurl_.GetNoArena();
}
inline void PBMaterial::set_normalmapurl(const ::std::string& value) {
  set_has_normalmapurl();
  normalmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMaterial.normalMapURL)
}
#if LANG_CXX11
inline void PBMaterial::set_normalmapurl(::std::string&& value) {
  set_has_normalmapurl();
  normalmapurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMaterial.normalMapURL)
}
#endif
inline void PBMaterial::set_normalmapurl(const char* value) {
  set_has_normalmapurl();
  normalmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMaterial.normalMapURL)
}
inline void PBMaterial::set_normalmapurl(const char* value, size_t size) {
  set_has_normalmapurl();
  normalmapurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMaterial.normalMapURL)
}
inline ::std::string* PBMaterial::mutable_normalmapurl() {
  set_has_normalmapurl();
  // @@protoc_insertion_point(field_mutable:PBMaterial.normalMapURL)
  return normalmapurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMaterial::release_normalmapurl() {
  // @@protoc_insertion_point(field_release:PBMaterial.normalMapURL)
  clear_has_normalmapurl();
  return normalmapurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMaterial::set_allocated_normalmapurl(::std::string* normalmapurl) {
  if (normalmapurl != NULL) {
    set_has_normalmapurl();
  } else {
    clear_has_normalmapurl();
  }
  normalmapurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normalmapurl);
  // @@protoc_insertion_point(field_set_allocated:PBMaterial.normalMapURL)
}

// -------------------------------------------------------------------

// PBSceneNode

// required .PBTransform worldTransform = 1;
inline bool PBSceneNode::has_worldtransform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSceneNode::set_has_worldtransform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSceneNode::clear_has_worldtransform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSceneNode::clear_worldtransform() {
  if (worldtransform_ != NULL) worldtransform_->::PBTransform::Clear();
  clear_has_worldtransform();
}
inline const ::PBTransform& PBSceneNode::worldtransform() const {
  // @@protoc_insertion_point(field_get:PBSceneNode.worldTransform)
  return worldtransform_ != NULL ? *worldtransform_
                         : *::PBTransform::internal_default_instance();
}
inline ::PBTransform* PBSceneNode::mutable_worldtransform() {
  set_has_worldtransform();
  if (worldtransform_ == NULL) {
    worldtransform_ = new ::PBTransform;
  }
  // @@protoc_insertion_point(field_mutable:PBSceneNode.worldTransform)
  return worldtransform_;
}
inline ::PBTransform* PBSceneNode::release_worldtransform() {
  // @@protoc_insertion_point(field_release:PBSceneNode.worldTransform)
  clear_has_worldtransform();
  ::PBTransform* temp = worldtransform_;
  worldtransform_ = NULL;
  return temp;
}
inline void PBSceneNode::set_allocated_worldtransform(::PBTransform* worldtransform) {
  delete worldtransform_;
  worldtransform_ = worldtransform;
  if (worldtransform) {
    set_has_worldtransform();
  } else {
    clear_has_worldtransform();
  }
  // @@protoc_insertion_point(field_set_allocated:PBSceneNode.worldTransform)
}

// required string meshURL = 2;
inline bool PBSceneNode::has_meshurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneNode::set_has_meshurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneNode::clear_has_meshurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneNode::clear_meshurl() {
  meshurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meshurl();
}
inline const ::std::string& PBSceneNode::meshurl() const {
  // @@protoc_insertion_point(field_get:PBSceneNode.meshURL)
  return meshurl_.GetNoArena();
}
inline void PBSceneNode::set_meshurl(const ::std::string& value) {
  set_has_meshurl();
  meshurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBSceneNode.meshURL)
}
#if LANG_CXX11
inline void PBSceneNode::set_meshurl(::std::string&& value) {
  set_has_meshurl();
  meshurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBSceneNode.meshURL)
}
#endif
inline void PBSceneNode::set_meshurl(const char* value) {
  set_has_meshurl();
  meshurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBSceneNode.meshURL)
}
inline void PBSceneNode::set_meshurl(const char* value, size_t size) {
  set_has_meshurl();
  meshurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBSceneNode.meshURL)
}
inline ::std::string* PBSceneNode::mutable_meshurl() {
  set_has_meshurl();
  // @@protoc_insertion_point(field_mutable:PBSceneNode.meshURL)
  return meshurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBSceneNode::release_meshurl() {
  // @@protoc_insertion_point(field_release:PBSceneNode.meshURL)
  clear_has_meshurl();
  return meshurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBSceneNode::set_allocated_meshurl(::std::string* meshurl) {
  if (meshurl != NULL) {
    set_has_meshurl();
  } else {
    clear_has_meshurl();
  }
  meshurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meshurl);
  // @@protoc_insertion_point(field_set_allocated:PBSceneNode.meshURL)
}

// repeated .PBMaterial materials = 3;
inline int PBSceneNode::materials_size() const {
  return materials_.size();
}
inline void PBSceneNode::clear_materials() {
  materials_.Clear();
}
inline const ::PBMaterial& PBSceneNode::materials(int index) const {
  // @@protoc_insertion_point(field_get:PBSceneNode.materials)
  return materials_.Get(index);
}
inline ::PBMaterial* PBSceneNode::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:PBSceneNode.materials)
  return materials_.Mutable(index);
}
inline ::PBMaterial* PBSceneNode::add_materials() {
  // @@protoc_insertion_point(field_add:PBSceneNode.materials)
  return materials_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PBMaterial >*
PBSceneNode::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:PBSceneNode.materials)
  return &materials_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMaterial >&
PBSceneNode::materials() const {
  // @@protoc_insertion_point(field_list:PBSceneNode.materials)
  return materials_;
}

// -------------------------------------------------------------------

// PBScene

// repeated .PBSceneNode sceneNodes = 1;
inline int PBScene::scenenodes_size() const {
  return scenenodes_.size();
}
inline void PBScene::clear_scenenodes() {
  scenenodes_.Clear();
}
inline const ::PBSceneNode& PBScene::scenenodes(int index) const {
  // @@protoc_insertion_point(field_get:PBScene.sceneNodes)
  return scenenodes_.Get(index);
}
inline ::PBSceneNode* PBScene::mutable_scenenodes(int index) {
  // @@protoc_insertion_point(field_mutable:PBScene.sceneNodes)
  return scenenodes_.Mutable(index);
}
inline ::PBSceneNode* PBScene::add_scenenodes() {
  // @@protoc_insertion_point(field_add:PBScene.sceneNodes)
  return scenenodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneNode >*
PBScene::mutable_scenenodes() {
  // @@protoc_insertion_point(field_mutable_list:PBScene.sceneNodes)
  return &scenenodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneNode >&
PBScene::scenenodes() const {
  // @@protoc_insertion_point(field_list:PBScene.sceneNodes)
  return scenenodes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneProtocol_2eproto__INCLUDED
